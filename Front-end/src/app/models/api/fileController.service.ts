/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent,HttpRequest }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { FileUploadBirthCertificateBody } from '../model/fileUploadBirthCertificateBody';
import { FileUploadImageBody } from '../model/fileUploadImageBody';
import { FileUploadLostcertificateBody } from '../model/fileUploadLostcertificateBody';
import { FileUploadNationalcertificateBody } from '../model/fileUploadNationalcertificateBody';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { Referencedocument } from '../model/referencedocument';
import { Additionaldocument } from '../model/additionaldocument';


@Injectable()
export class FileControllerService {

    protected basePath = 'http://localhost:8084';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    private baseUrl="http://localhost:8084/api/v1/file";


    constructor(private http: HttpClient,protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }


    getFiles(): Observable<any> {
      return this.http.get(`${this.baseUrl}/files`);
    }



    upload(file: File): Observable<HttpEvent<any>> {
      const formData: FormData = new FormData();

      formData.append('birthCertificate', file);
     /*  formData.append('lostCertificate', file1);
      formData.append('nationalCertificate', file2);
      //formData.append('image', file3); */
  console.log("formData", formData);
  console.log("file", file);
      const req = new HttpRequest('POST', `${this.baseUrl}/uploadDocuments`, formData, {
        reportProgress: true,
        responseType: 'json'
      });

      return this.http.request(req);
    }

    uploadBirthCertificate(formData: FormData, agentId: number, referenceDocumentId: number, type: string): Observable<HttpEvent<any>> {
      let queryParams = new HttpParams();
      queryParams = queryParams
                                .append("agentId",agentId)
                                .append("referenceDocumentId",referenceDocumentId)
                                .append("type", type);
      return this.http.post<string[]>(
        `${this.baseUrl}/upload_BirthCertificate`,
        formData,
        {
          params: queryParams,
          reportProgress: true,
          observe: 'events'
        }
      );
    }

    uploadNationalcertificate(formData: FormData, agentId: number, referenceDocumentId: number, type: string): Observable<HttpEvent<any>> {
      let queryParams = new HttpParams();
      queryParams = queryParams
                                .append("agentId",agentId)
                                .append("referenceDocumentId",referenceDocumentId)
                                .append("type", type);
      return this.http.post<string[]>(
        `${this.baseUrl}/upload_NationalCertificate`,
        formData,
        {
          params: queryParams,
          reportProgress: true,
          observe: 'events'
        }
      );
    }

    uploadLostcertificate(formData: FormData, agentId: number, referenceDocumentId: number, type: string): Observable<HttpEvent<any>> {
      let queryParams = new HttpParams();
      queryParams = queryParams
                                .append("agentId",agentId)
                                .append("referenceDocumentId",referenceDocumentId)
                                .append("type", type);
      return this.http.post<string[]>(
        `${this.baseUrl}/upload_LostCertificate`,
        formData,
        {
          params: queryParams,
          reportProgress: true,
          observe: 'events'
        }
      );
    }

    uploadImage(image: string, agentId: number, referenceDocumentId: number, type: string): Observable<any> {
      let queryParams = new HttpParams();
      queryParams = queryParams
                                .append("agentId",agentId)
                                .append("referenceDocumentId",referenceDocumentId)
                                .append("type", type);
      return this.http.post<any>(`${this.baseUrl}/upload_Image`,image,{params: queryParams});
    }





}


